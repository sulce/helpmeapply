generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts           Account[]
  sessions           Session[]
  profile            Profile?
  structuredResume   StructuredResume?
  applications       Application[]
  jobNotifications   JobNotification[]
  applicationReviews ApplicationReview[]
  customizedResumes  CustomizedResume[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model Profile {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @unique @map("user_id") @db.ObjectId
  fullName          String    @map("full_name")
  email             String
  mobile            String?
  jobTitlePrefs     String    @map("job_title_preferences") // JSON string
  yearsExperience   Int?      @map("years_experience")
  salaryMin         Int?      @map("salary_min")
  salaryMax         Int?      @map("salary_max")
  preferredLocations String   @map("preferred_locations") // JSON string
  employmentTypes   String    @map("employment_types") // JSON string
  resumeUrl         String?   @map("resume_url")
  linkedinUrl       String?   @map("linkedin_url")
  indeedProfile     String?   @map("indeed_profile")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills           Skill[]
  autoApplySettings AutoApplySettings?

  @@map("profiles")
}

model Skill {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  profileId     String          @map("profile_id") @db.ObjectId
  name          String
  proficiency   ProficiencyLevel
  yearsUsed     Int?            @map("years_used")
  createdAt     DateTime        @default(now()) @map("created_at")

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("skills")
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  REMOTE
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Application {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  userId            String            @map("user_id") @db.ObjectId
  jobTitle          String            @map("job_title")
  company           String
  jobDescription    String?           @map("job_description")
  jobUrl            String?           @map("job_url")
  location          String?
  salaryRange       String?           @map("salary_range")
  employmentType    EmploymentType?   @map("employment_type")
  status            ApplicationStatus @default(APPLIED)
  appliedAt         DateTime          @default(now()) @map("applied_at")
  responseAt        DateTime?         @map("response_at")
  notes             String?
  coverLetter       String?           @map("cover_letter")
  customizedResumeUrl String?         @map("customized_resume_url") // URL to customized resume for this job
  resumeCustomizationData String?     @map("resume_customization_data") // JSON: notes, keywords, improvements
  matchScore        Float?            @map("match_score") // AI confidence score 0-1
  source            String?           // "linkedin", "indeed", etc.
  sourceJobId       String?           @map("source_job_id") // External job ID
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  customizedResumes CustomizedResume[]

  @@map("applications")
}

enum ApplicationStatus {
  APPLIED
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_RECEIVED
  REJECTED
  WITHDRAWN
}

model Job {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  company         String
  description     String?
  url             String?
  location        String?
  salaryRange     String?       @map("salary_range")
  employmentType  EmploymentType? @map("employment_type")
  source          String        // "linkedin", "indeed", "manual", etc.
  sourceJobId     String?       @map("source_job_id")
  isProcessed     Boolean       @default(false) @map("is_processed")
  matchScore      Float?        @map("match_score")
  appliedTo       Boolean       @default(false) @map("applied_to")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  jobNotifications   JobNotification[]
  applicationReviews ApplicationReview[]
  customizedResumes  CustomizedResume[]

  @@map("jobs")
}

model AutoApplySettings {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId             String   @unique @map("profile_id") @db.ObjectId
  isEnabled             Boolean  @default(false) @map("is_enabled")
  minMatchScore         Float    @default(0.75) @map("min_match_score")
  maxApplicationsPerDay Int      @default(5) @map("max_applications_per_day")
  excludedCompanies     String?  @map("excluded_companies") // JSON array
  excludedKeywords      String?  @map("excluded_keywords") // JSON array
  preferredSources      String?  @map("preferred_sources") // JSON array
  requireSalaryRange    Boolean  @default(false) @map("require_salary_range")
  autoScanEnabled       Boolean  @default(true) @map("auto_scan_enabled")
  scanFrequencyHours    Int      @default(4) @map("scan_frequency_hours")
  
  // New notification and approval settings
  notifyOnMatch         Boolean  @default(true) @map("notify_on_match")
  notifyMinScore        Float    @default(0.6) @map("notify_min_score")
  requireApproval       Boolean  @default(true) @map("require_approval")
  autoApplyEnabled      Boolean  @default(false) @map("auto_apply_enabled")
  customizeResume       Boolean  @default(true) @map("customize_resume")
  reviewTimeoutHours    Int      @default(24) @map("review_timeout_hours")
  
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("auto_apply_settings")
}

model JobQueue {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  jobId       String     @map("job_id") @db.ObjectId
  userId      String     @map("user_id")
  status      QueueStatus @default(PENDING)
  priority    Int        @default(1)
  attempts    Int        @default(0)
  maxAttempts Int        @default(3) @map("max_attempts")
  errorMessage String?   @map("error_message")
  processedAt DateTime? @map("processed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("job_queue")
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
  SCHEDULED
}

model JobNotification {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @map("user_id")
  jobId           String            @map("job_id")
  matchScore      Float             @map("match_score")
  status          NotificationStatus @default(PENDING)
  message         String
  customizedResume String?          @map("customized_resume") // URL or content
  coverLetter     String?          @map("cover_letter")
  applicationData String?          @map("application_data") // JSON with pre-filled answers
  expiresAt       DateTime?        @map("expires_at")
  viewedAt        DateTime?        @map("viewed_at")
  respondedAt     DateTime?        @map("responded_at")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  job              Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicationReviews ApplicationReview[]

  @@map("job_notifications")
}

enum NotificationStatus {
  PENDING       // Waiting for user review
  VIEWED        // User has seen the notification
  APPROVED      // User approved the application
  REJECTED      // User rejected the application  
  EXPIRED       // Notification expired without response
  APPLIED       // Application was submitted
}

model ApplicationReview {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  userId            String              @map("user_id")
  jobId             String              @map("job_id")
  notificationId    String              @map("notification_id") @db.ObjectId
  status            ApplicationReviewStatus @default(PENDING)
  matchScore        Float               @map("match_score")
  aiRecommendation  String              @map("ai_recommendation")
  customizedResume  String?             @map("customized_resume")
  coverLetter       String              @map("cover_letter")
  applicationAnswers String?            @map("application_answers") // JSON
  userNotes         String?             @map("user_notes")
  reviewedAt        DateTime?           @map("reviewed_at")
  submittedAt       DateTime?           @map("submitted_at")
  expiresAt         DateTime            @map("expires_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  job          Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  notification JobNotification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("application_reviews")
}

enum ApplicationReviewStatus {
  PENDING           // Waiting for user review
  APPROVED          // User approved for submission
  REJECTED          // User rejected the application
  SUBMITTED         // Application was submitted
  EXPIRED           // Review period expired
  AUTO_SUBMITTED    // Automatically submitted due to settings
}

model StructuredResume {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @map("user_id") @db.ObjectId
  
  // Contact Information
  contactInfo   String   @map("contact_info") // JSON: { name, email, phone, address, linkedin, website }
  
  // Professional Summary
  summary       String?
  
  // Work Experience 
  experience    String   @map("experience") // JSON array of experience objects
  
  // Education
  education     String   @map("education") // JSON array of education objects
  
  // Skills
  skills        String   @map("skills") // JSON array of skill objects
  
  // Certifications
  certifications String? @map("certifications") // JSON array of certification objects
  
  // Additional Sections (optional)
  projects      String?  @map("projects") // JSON array
  achievements  String?  @map("achievements") // JSON array
  languages     String?  @map("languages") // JSON array
  
  // Template and Regional Settings
  templateRegion String  @default("US") @map("template_region") // US, UK, CA, EU, ACADEMIC
  includePhoto   Boolean @default(false) @map("include_photo")
  photoUrl       String? @map("photo_url")
  sectionOrder   String  @default("[]") @map("section_order") // JSON array of section order
  
  // Optional Personal Details (for EU/International templates)
  personalDetails String? @map("personal_details") // JSON: { age, nationality, maritalStatus }
  
  // Metadata
  isComplete    Boolean  @default(false) @map("is_complete")
  lastPdfUrl    String?  @map("last_pdf_url") // URL to most recently generated PDF
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("structured_resumes")
}

model CustomizedResume {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @map("user_id") @db.ObjectId
  jobId             String?  @map("job_id") @db.ObjectId // Optional - can be used for future applications
  applicationId     String?  @map("application_id") @db.ObjectId // Link to specific application
  originalResumeUrl String   @map("original_resume_url")
  customizedContent String   @map("customized_content") // Customized resume text/content
  customizedResumeUrl String? @map("customized_resume_url") // URL to generated PDF
  jobTitle          String   @map("job_title")
  company           String
  customizationData String   @map("customization_data") // JSON: notes, keywords, improvements
  matchScore        Float?   @map("match_score")
  keywordMatches    String?  @map("keyword_matches") // JSON array of matched keywords
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job? @relation(fields: [jobId], references: [id], onDelete: SetNull)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: SetNull)

  @@map("customized_resumes")
}