name: Background Jobs

# This workflow triggers background jobs for the HelpMeApply application
# Required GitHub Secrets:
#   - VERCEL_URL: Your deployed Vercel app URL (e.g., https://helpmeapply.vercel.app)
#   - CRON_SECRET: Secret token for authenticating cron requests (must match CRON_SECRET in Vercel env vars)

on:
  schedule:
    # Job scanning every 4 hours
    - cron: '0 */4 * * *'
    # Cleanup every 6 hours  
    - cron: '0 */6 * * *'
    # Daily summary at 9 AM
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  determine-job-type:
    runs-on: ubuntu-latest
    outputs:
      job-type: ${{ steps.determine.outputs.job-type }}
    steps:
      - name: Determine job type
        id: determine
        run: |
          current_hour=$(date +%H)
          current_minute=$(date +%M)
          
          # Check if it's 9 AM (daily summary)
          if [[ "$current_hour" == "09" && "$current_minute" == "00" ]]; then
            echo "job-type=daily-summary" >> $GITHUB_OUTPUT
          # Check if it's a 6-hour interval (cleanup)  
          elif [[ $(($current_hour % 6)) == "0" && "$current_minute" == "00" ]]; then
            echo "job-type=cleanup" >> $GITHUB_OUTPUT
          # Default to job scanning (4-hour interval)
          else
            echo "job-type=job-scan" >> $GITHUB_OUTPUT
          fi

  job-scan:
    runs-on: ubuntu-latest
    needs: determine-job-type
    if: needs.determine-job-type.outputs.job-type == 'job-scan'
    steps:
      - name: Debug environment
        run: |
          echo "Checking environment variables..."
          echo "VERCEL_URL is set: ${{ secrets.VERCEL_URL != '' }}"
          echo "CRON_SECRET is set: ${{ secrets.CRON_SECRET != '' }}"
          
      - name: Trigger job scanning
        run: |
          VERCEL_URL="${{ secrets.VERCEL_URL }}"
          CRON_SECRET="${{ secrets.CRON_SECRET }}"
          
          if [ -z "$VERCEL_URL" ]; then
            echo "‚ùå Error: VERCEL_URL secret is not set or empty"
            echo "Please set VERCEL_URL in GitHub repository secrets to your deployed Vercel app URL"
            echo "Example: https://helpmeapply.vercel.app"
            exit 1
          fi
          
          if [ -z "$CRON_SECRET" ]; then
            echo "‚ùå Error: CRON_SECRET is not set"
            echo "Please set CRON_SECRET in GitHub repository secrets"
            exit 1
          fi
          
          echo "üöÄ Triggering job scan at: $VERCEL_URL/api/cron/job-scan"
          
          response=$(curl -X POST \
            -H "Authorization: Bearer $CRON_SECRET" \
            -H "Content-Type: application/json" \
            "$VERCEL_URL/api/cron/job-scan" \
            -w "HTTPSTATUS:%{http_code}" \
            -s)
            
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "üìä Response status: $http_code"
          echo "üìÑ Response body: $body"
          
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Job scan triggered successfully"
          else
            echo "‚ùå Job scan failed with status: $http_code"
            exit 1
          fi

  cleanup:
    runs-on: ubuntu-latest  
    needs: determine-job-type
    if: needs.determine-job-type.outputs.job-type == 'cleanup'
    steps:
      - name: Trigger cleanup tasks
        run: |
          VERCEL_URL="${{ secrets.VERCEL_URL }}"
          CRON_SECRET="${{ secrets.CRON_SECRET }}"
          
          if [ -z "$VERCEL_URL" ]; then
            echo "‚ùå Error: VERCEL_URL secret is not set or empty"
            exit 1
          fi
          
          if [ -z "$CRON_SECRET" ]; then
            echo "‚ùå Error: CRON_SECRET is not set"
            exit 1
          fi
          
          echo "üßπ Triggering cleanup at: $VERCEL_URL/api/cron/cleanup"
          
          response=$(curl -X POST \
            -H "Authorization: Bearer $CRON_SECRET" \
            -H "Content-Type: application/json" \
            "$VERCEL_URL/api/cron/cleanup" \
            -w "HTTPSTATUS:%{http_code}" \
            -s)
            
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "üìä Response status: $http_code"
          echo "üìÑ Response body: $body"
          
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Cleanup triggered successfully"
          else
            echo "‚ùå Cleanup failed with status: $http_code"
            exit 1
          fi

  daily-summary:
    runs-on: ubuntu-latest
    needs: determine-job-type  
    if: needs.determine-job-type.outputs.job-type == 'daily-summary'
    steps:
      - name: Trigger daily summary
        run: |
          VERCEL_URL="${{ secrets.VERCEL_URL }}"
          CRON_SECRET="${{ secrets.CRON_SECRET }}"
          
          if [ -z "$VERCEL_URL" ]; then
            echo "‚ùå Error: VERCEL_URL secret is not set or empty"
            exit 1
          fi
          
          if [ -z "$CRON_SECRET" ]; then
            echo "‚ùå Error: CRON_SECRET is not set"
            exit 1
          fi
          
          echo "üìä Triggering daily summary at: $VERCEL_URL/api/cron/daily-summary"
          
          response=$(curl -X POST \
            -H "Authorization: Bearer $CRON_SECRET" \
            -H "Content-Type: application/json" \
            "$VERCEL_URL/api/cron/daily-summary" \
            -w "HTTPSTATUS:%{http_code}" \
            -s)
            
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          body=$(echo $response | sed -e 's/HTTPSTATUS:.*//g')
          
          echo "üìä Response status: $http_code"
          echo "üìÑ Response body: $body"
          
          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Daily summary triggered successfully"
          else
            echo "‚ùå Daily summary failed with status: $http_code"
            exit 1
          fi